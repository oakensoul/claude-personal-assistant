---
title: "Software Architect - AIDA Project Context"
description: "Project-specific architecture documentation for AIDA framework"
project: "claude-personal-assistant (AIDA)"
last_updated: "2025-10-15"
---

# Software Architect - AIDA Project Context

This directory contains project-specific architecture documentation for the AIDA (Agentic Intelligence Digital Assistant) framework.

## Project Overview

**Project**: claude-personal-assistant (AIDA)
**Type**: Software (CLI framework, shell scripts, YAML configuration)
**Architecture**: Modular CLI framework with personality system, agent orchestration, and knowledge management

## Project Architecture Type

**Primary**: Software Architecture (not data/dbt project)

**Characteristics**:
- Shell script-based installation and CLI
- YAML configuration system
- Template-based code generation
- Integration with external tools (Obsidian, Git, Stow)
- Agent orchestration framework

## Project Documentation Locations

**Agent Configuration** (this directory):
```
.claude/agents-global/software-architect/
└── index.md (this file - project context for software-architect agent)
```

**Architecture Documentation** (standard docs location):
```
docs/architecture/
├── c4-system-context.md
├── c4-container.md (future)
├── component-architecture.md (future)
├── decisions/
│   ├── README.md (ADR index)
│   ├── adr-001-shell-script-framework.md (future)
│   ├── adr-002-two-tier-agent-architecture.md
│   └── adr-003-yaml-configuration-system.md (future)
└── specifications/
    ├── non-functional-requirements.md (future)
    ├── integration-specifications.md (future)
    └── security-requirements.md (future)
```

**Note**: ADRs and C4 diagrams are project documentation, not agent configuration. They live in the standard `docs/architecture/` directory where all team members can find them.

## Current Architecture Decisions

### Key ADRs (To Be Created)

1. **ADR-001: Shell Script Framework** - Why Bash over Python for core framework
2. **ADR-002: YAML Configuration System** - Agent and personality configuration format
3. **ADR-003: Two-Tier Agent Architecture** - User-level + project-level knowledge separation
4. **ADR-004: GNU Stow Integration** - Dotfiles management strategy
5. **ADR-005: Template Variable Substitution** - Install-time vs runtime variables

### Technology Stack

**Core Framework**:
- **Language**: Bash (macOS/Linux compatibility)
- **Configuration**: YAML (agents, personalities, commands)
- **Templating**: Sed-based variable substitution
- **Version Control**: Git

**Integrations**:
- **Obsidian**: Daily notes, project tracking, dashboard views
- **GNU Stow**: Dotfiles management
- **GitHub**: Issue tracking, PR workflow
- **Docker**: Cross-platform testing (Ubuntu, macOS)

**Development**:
- **Testing**: Pre-commit hooks (shellcheck, yamllint, markdownlint)
- **CI/CD**: GitHub Actions
- **Documentation**: Markdown with frontmatter

## System Boundaries

**In Scope** (AIDA Framework):
- Installation framework (`install.sh`)
- Agent orchestration system
- Personality system (tone, response patterns)
- Template management (commands, agents, knowledge)
- Memory and state management
- CLI command generation

**Out of Scope** (External Systems):
- Claude AI API (provided by Anthropic)
- Obsidian application (external tool)
- Git implementation (system dependency)
- GNU Stow (system dependency)

## Architecture Patterns

### Current Patterns

**Template Pattern**:
- Agent templates in `templates/agents/`
- Command templates in `templates/commands/`
- Knowledge templates in `templates/knowledge/`
- Variable substitution at install time

**Two-Tier Knowledge Architecture**:
- **User-level**: `~/.claude/agents/{agent}/knowledge/` (generic, reusable)
- **Project-level**: `{project}/.claude/agents-global/{agent}/` (project-specific)

**Configuration Over Code**:
- YAML-driven agent definitions
- Markdown-based knowledge bases
- Template-based command generation

**Modular Design**:
- `lib/installer-common/` shared library functions
- Pluggable personalities
- Pluggable agents
- Command isolation

## Non-Functional Requirements

### Performance

- Installation: < 30 seconds (normal mode)
- Command execution: < 2 seconds for most commands
- Template rendering: Near-instant

### Compatibility

- **macOS**: Primary platform (Bash 3.2+ required)
- **Linux**: Secondary platform (Ubuntu 22+, Bash 4.0+)
- **Windows**: Not supported (use WSL2)

### Security

- No secrets in repository (use dotfiles-private)
- File permissions: 600 for user configs
- Template validation before installation
- Privacy scrubbing for knowledge sync

### Maintainability

- Pass all pre-commit hooks (shellcheck, yamllint, markdownlint)
- Comprehensive inline documentation
- Semantic versioning (MAJOR.MINOR.PATCH)
- CHANGELOG.md maintained

## Integration Points

### Obsidian Integration

**Pattern**: Optional integration (AIDA works standalone)

**Files**:
- Daily notes: `~/Documents/Obsidian/Daily/YYYY-MM-DD.md`
- Project tracking: `~/Documents/Obsidian/Projects/`
- Dashboard: `~/Documents/Obsidian/Dashboard.md`

### Dotfiles Integration

**Pattern**: Bidirectional (dotfiles can install AIDA, AIDA works without dotfiles)

**Integration**:
- Dotfiles can trigger AIDA installation via `scripts/install-aida.sh`
- AIDA provides shell completions via dotfiles
- Shared configuration in `~/.config/`

### GitHub Workflow

**Commands**:
- `/start-work {issue}`: Create branch from issue
- `/open-pr`: Create PR with version bump and changelog
- `/cleanup-main`: Post-merge cleanup

**Integration**:
- Issue templates in `.github/issues/`
- PR templates
- GitHub Actions for CI/CD

## Cross-Cutting Concerns

### Logging

**Current**: Basic echo statements in shell scripts

**Future Consideration**: Structured logging with log levels

### Error Handling

**Pattern**: `set -euo pipefail` in all shell scripts

**Validation**:
- User input validation in all scripts
- Template variable validation before installation
- Exit codes for all commands

### Testing

**Strategy**:
- Pre-commit hooks (static analysis)
- Docker-based integration tests (`.github/testing/`)
- Manual testing on macOS and Linux

### Documentation

**Pattern**: Markdown everywhere

**Types**:
- Inline code comments (shell scripts)
- YAML frontmatter (agents, commands)
- Architecture docs (this directory)
- User-facing README files

## Known Technical Debt

1. **Shell Script Complexity**: Some scripts are getting large (consider splitting)
2. **Limited Error Recovery**: Installation errors require manual cleanup
3. **No Rollback Mechanism**: Failed installations don't auto-restore previous state
4. **Minimal Logging**: Hard to debug issues without verbose mode

## Future Architecture Considerations

1. **Plugin System**: Allow third-party agents and commands
2. **CLI Tool (Rust/Go)**: Replace shell scripts with compiled binary
3. **Configuration Validation**: JSON Schema for YAML files
4. **State Management**: Track installation state for rollback
5. **Remote Templates**: Pull agent/command templates from registry

## Related Documentation

- **User-Level Knowledge**: `~/.claude/agents/software-architect/knowledge/`
- **Architecture Documentation**: `docs/architecture/` (ADRs, C4 diagrams)
- **ADR Index**: `docs/architecture/decisions/README.md`
- **C4 System Context**: `docs/architecture/c4-system-context.md`
- **CLAUDE.md**: `CLAUDE.md` (project instructions)
- **Contributing Guide**: `docs/CONTRIBUTING.md`

## Version History

**v1.0** - 2025-10-15
- Initial project-level software-architect configuration
- Documented current architecture patterns
- Identified key ADRs to create
- Documented technology stack and integration points
