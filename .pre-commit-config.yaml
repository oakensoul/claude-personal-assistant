# Pre-commit hooks for AIDA
# Install: pip install pre-commit && pre-commit install
# Run manually: pre-commit run --all-files

repos:
  # General file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: trailing-whitespace
        name: Trim trailing whitespace
      - id: end-of-file-fixer
        name: Fix end of files
      - id: check-yaml
        name: Check YAML syntax
        args: [--allow-multiple-documents]
      - id: check-json
        name: Check JSON syntax
        exclude: tests/fixtures/configs/invalid-structure/invalid-json.json
      - id: check-added-large-files
        name: Check for large files
        args: [--maxkb=1000]
      - id: check-merge-conflict
        name: Check for merge conflicts
      - id: mixed-line-ending
        name: Fix mixed line endings
        args: [--fix=lf]

  # YAML linting
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.35.1
    hooks:
      - id: yamllint
        name: Lint YAML files
        args: [-c=.yamllint, --strict]

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        name: Lint shell scripts
        args: [--severity=warning]

  # Secret detection
  - repo: https://github.com/gitleaks/gitleaks
    rev: v8.18.2
    hooks:
      - id: gitleaks
        name: Detect secrets and credentials

  # Markdown linting (optional but nice)
  - repo: https://github.com/DavidAnson/markdownlint-cli2
    rev: v0.18.1
    hooks:
      - id: markdownlint-cli2
        name: Lint markdown files
        args: [--config, .markdownlint.json]

  # Local project-specific checks
  - repo: local
    hooks:
      - id: validate-templates
        name: Validate template privacy
        description: Check templates for hardcoded paths, usernames, and credentials
        entry: scripts/validate-templates.sh
        language: script
        files: ^templates/.*\.md$
        pass_filenames: false
        verbose: true
        # TODO: Fix CI-specific failure (works locally, fails in GitHub Actions)
        # Temporarily allow failures until root cause is identified
        stages: [manual]

      # AIDA config security validation
      # Detects secrets in AIDA configuration files (user and project configs)
      # Checks for: GitHub tokens, Jira tokens, Linear keys, Anthropic keys, AWS credentials
      # Coordinates with gitleaks hook (broader scope) - this is config-specific
      #
      # To bypass (NOT RECOMMENDED):
      #   git commit --no-verify
      #
      # Only bypass when:
      #   - False positive (placeholder/example value)
      #   - Committing a template with placeholder secrets
      # NEVER bypass for actual API keys or tokens!
      - id: validate-config-security
        name: Validate config file security (AIDA)
        description: Detect secrets and credentials in AIDA configuration files
        entry: scripts/validate-config-security.sh
        language: script
        files: config\.json$
        pass_filenames: false
